import java.util.*;
public class Main
{
    static class Node{
        int data;
        Node next;
        Node(int data){
            this.data=data;
            this.next=null;
        }
    }
    
    public static Node formLL(int arr[]){
       Node head=new Node(arr[0]);
    Node ptr=head;
    for(int i=1;i<arr.length;i++){
        Node temp=new Node(arr[i]);
        ptr.next=temp;
        ptr=temp;
    }
    return head;
    }
    
    public static void displayLL(Node ptr){
        while(ptr!=null) {  System.out.print(ptr.data+" ");
            ptr=ptr.next;
        }
    }
    
    public static Node insertAtStart(Node ptr,int data){
        Node temp=new Node(data);
        temp.next=ptr;
        return temp;
        
    }
    
    public static Node deleteFromStart(Node ptr){
        ptr=ptr.next;
        return ptr;
    }
    
    public static Node deleteFromEnd(Node ptr){
        Node head = ptr;
        while(ptr.next.next!=null)  ptr=ptr.next;
        ptr.next=null;
        return head;
    }
    
    public static Node insertAtEnd(Node head,int data){
        Node temp=new Node(data);
        Node ptr=head;
        while(ptr.next!=null)   ptr=ptr.next;
        ptr.next=temp;
        return head;
    }
    
    public static Node insertInBetween(Node node,int data,int idx){
        Node newdata=new Node(data);
        Node ptr=node;
        int count=0;
        while(count<(idx-1)){
            count++;
            ptr=ptr.next;
        }
        newdata.next=ptr.next;
        ptr.next=newdata;
        return node;
    }
    
    public static int lengthOfLL(Node head){
        int count=0;
        while(head!=null)   {
            count++;
            head=head.next;
            
        }   return count;
    } 
    
    public static Node deleteValOfLL(Node head,int value){
        Node temp=head;
        while(temp.next.data!=value)    temp=temp.next;
        
        temp.next=temp.next.next;
        return head;
    }
    
    public static Node deleteithIndexLL(Node head,int idx){
        Node ptr=head;
        int count=0;
        while(count<(idx-1)){
            count++;
            ptr=ptr.next;
        }
        ptr.next=ptr.next.next;
        return head;
        
    }
    
    public static boolean searchInLL(Node head,int ele){
        boolean flag=false;
        while(head!=null){
            if(head.data==ele)  return true;
            else head=head.next;
        }
        return false;
    }
    
	public static void main(String[] args) {
	    
	  int arr[]=new int[]{1,2,3,4,5,6,7};
	  Node head = formLL(arr);
	  
	  head = insertAtStart(head,456);
	  displayLL(head);
	   System.out.println();
	  head= deleteFromStart(head);
	    displayLL(head);
	  
	   System.out.println();
	   head=insertAtEnd(head,69);
	  
	      displayLL(head);
	       System.out.println();
	   head = deleteFromEnd(head);
	      displayLL(head);
	       System.out.println();
	     head=deleteValOfLL(head,5);
	      displayLL(head);
	       System.out.println();
	      System.out.println(lengthOfLL(head));
	      System.out.println();
	      System.out.println(searchInLL(head,9));
	       System.out.println();
	   head=deleteithIndexLL(head,4);
	   displayLL(head);
	    System.out.println();
	   head=insertInBetween(head,111,4);
	    displayLL(head);
	}
}
